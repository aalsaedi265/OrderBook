
Quant project aimed to create an order book and a trading engine.

Feel free to fork and use this code as you see fit, will build in Go because I want to learn Go and its faster than python, easier to debug than Java, and more enjoyable than C# to work with.



go build, go test  get the go.sum 
go mod tidy ensures that the go.mod file matches the source code in the module




order-book/
│
├── cmd/
│   └── app/                # Entry point directory for the application
│       └── main.go         # Entry point of the application
│
├── internal/
│   ├── engine/             # Package containing the core trading engine logic
│   │   └── engine.go       # Trading engine implementation
│   │
│   ├── book/               # Package containing the order book logic
│   │   ├── order.go        # Definitions and operations related to orders
│   │   └── book.go         # Order book management
|   |   |__book_test.go     # Unit tests for the order book
│   │
│   └── matcher/            # Package for order matching algorithms
│       └── matcher.go      # Matching algorithm implementation
│
├── go.mod                  # Go module file
├── go.sum                  # Dependencies checksum file
└── README.md               # Project documentation


when running tests do it the main directory
go test ./internal/book

*BOOK FUNCTIONALITY
    1. Expand Order Structure
    You might want to add more details to the Order struct, such as timestamps, to keep track of when orders were placed, or other metadata.

    2. Implement Listing Orders
    Next, we’ll add a method to list orders currently in the OrderBook.

*MATCH FUNCTIONLITY 
    Order Matching Logic: The goal is to match buy orders with sell orders. A buy order should match the lowest available sell order that meets or beats its price, and vice versa.

    Execution of Trades: When a match is found, we need to execute the trade, meaning we'll reduce the quantity of the matched orders and remove them if fully filled.

    Partial Fills: If an order can only be partially matched, it should be partially filled, and the remaining quantity should stay in the order book.